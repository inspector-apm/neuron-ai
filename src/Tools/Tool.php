<?php

namespace NeuronAI\Tools;

use NeuronAI\Exceptions\MissingCallbackParameter;
use NeuronAI\Exceptions\ToolCallableNotSet;
use NeuronAI\StaticConstructor;
use NeuronAI\StructuredOutput\Deserializer\Deserializer;
use NeuronAI\StructuredOutput\Deserializer\DeserializerException;

class Tool implements ToolInterface
{
    use StaticConstructor;

    /**
     * The list of callback function arguments.
     *
     * @var array<ToolPropertyInterface>
     */
    protected array $properties = [];

    /**
     * @var ?callable
     */
    protected $callback = null;

    /**
     * The arguments to pass in to the callback.
     *
     * @var array
     */
    protected array $inputs = [];

    /**
     * The call ID generated by the LLM.
     *
     * @var ?string
     */
    protected ?string $callId = null;

    /**
     * The result of the execution.
     *
     * @var string|null
     */
    protected string|null $result = null;

    /**
     * Tool constructor.
     *
     * @param string $name
     * @param string $description
     */
    public function __construct(
        protected string $name,
        protected string $description,
    ) {
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function addProperty(ToolPropertyInterface $property): ToolInterface
    {
        $this->properties[] = $property;
        return $this;
    }

    public function getProperties(): array
    {
        return $this->properties;
    }

    public function getRequiredProperties(): array
    {
        return \array_reduce($this->properties, function ($carry, ToolPropertyInterface $property) {
            if ($property->isRequired()) {
                $carry[] = $property->getName();
            }

            return $carry;
        }, []);
    }

    public function setCallable(callable $callback): self
    {
        $this->callback = $callback;
        return $this;
    }

    public function getInputs(): array
    {
        return $this->inputs ?? [];
    }

    public function setInputs(?array $inputs): self
    {
        $this->inputs = $inputs ?? [];
        return $this;
    }

    public function getCallId(): ?string
    {
        return $this->callId;
    }

    public function setCallId(?string $callId): self
    {
        $this->callId = $callId;
        return $this;
    }

    public function getResult(): string
    {
        return $this->result;
    }

    public function setResult(string|array $result): self
    {
        $this->result = is_array($result) ? \json_encode($result) : $result;
        return $this;
    }

    /**
     * Execute the client side function.
     *
     * @throws MissingCallbackParameter
     * @throws ToolCallableNotSet
     * @throws DeserializerException
     * @throws \ReflectionException
     */
    public function execute(): void
    {
        if (!is_callable($this->callback)) {
            throw new ToolCallableNotSet('No function defined for tool execution.');
        }

        // Validate required parameters
        foreach ($this->properties as $property) {
            if ($property->isRequired() && !\array_key_exists($property->getName(), $this->getInputs())) {
                throw new MissingCallbackParameter("Missing required parameter: {$property->getName()}");
            }
        }

        $parameters = array_reduce($this->properties, function ($carry, $property) {
            $propertyName = $property->getName();
            $inputs = $this->getInputs();

            if (!array_key_exists($propertyName, $inputs)) {
                return $carry;
            }

            $inputValue = $inputs[$propertyName];

            if ($property instanceof ObjectProperty && $property->getClass()) {
                $carry[$propertyName] = Deserializer::fromJson(json_encode($inputValue), $property->getClass());
                return $carry;
            }

            if ($property instanceof ArrayProperty) {
                $items = $property->getItems();
                if ($items instanceof ObjectProperty && $items->getClass()) {
                    $class = $items->getClass();
                    $carry[$propertyName] = array_map(function ($input) use ($class) {
                        return Deserializer::fromJson(json_encode($input), $class);
                    }, $inputValue);
                    return $carry;
                }
            }

            $carry[$propertyName] = $inputValue;
            return $carry;

        }, []);

        $this->setResult(
            \call_user_func($this->callback, ...$parameters)
        );
    }

    public function jsonSerialize(): array
    {
        return [
            'name' => $this->name,
            'description' => $this->description,
            'inputs' => !empty($this->inputs) ? $this->inputs : new \stdClass(),
            'callId' => $this->callId,
            'result' => $this->result,
        ];
    }
}
